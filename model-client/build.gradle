
plugins {
    id 'maven-publish'
    id 'org.jetbrains.kotlin.multiplatform'
    id "com.diffplug.gradle.spotless"
    id "org.jlleitschuh.gradle.ktlint"
    id "java-library"
    id 'jacoco'
}

configurations {
    ktlint
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "11"
    }
}

ktlint {
    disabledRules = ["no-wildcard-imports"]
}

check.dependsOn ktlintCheck

kotlin {
    jvm()
    js {
        //browser {}
        nodejs {
            testTask {
                useMocha {
                    timeout = 30000
                }
            }
        }
    }
    sourceSets {
        commonMain {
            dependencies {
                api group: 'org.modelix', name: 'model-api', version: "$mpsExtensionsVersion"
                implementation kotlin('stdlib-common')
                implementation("org.jetbrains.kotlinx:kotlinx-collections-immutable:0.3.4")
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }
        jvmMain {
            dependencies {
                implementation kotlin('stdlib-jdk8')

                implementation group: 'io.vavr', name: 'vavr', version: '0.10.3'
                implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.11'
                implementation group: 'com.google.guava', name: 'guava', version: '29.0-jre'
                implementation group: 'log4j', name: 'log4j', version:'1.2.17'
                implementation group: 'org.glassfish.jersey.core', name: 'jersey-client', version: '2.31'
                implementation group: 'org.glassfish.jersey.inject', name: 'jersey-hk2', version: '2.31'
                implementation group: 'org.glassfish.jersey.media', name: 'jersey-media-sse', version: '2.31'
                implementation group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.1'
                implementation group: 'commons-io', name: 'commons-io', version: '2.7'
                implementation group: 'org.json', name: 'json', version: '20200518'
                implementation group: 'net.sf.trove4j', name: 'trove4j', version: '3.0.3'
                implementation group: 'org.apache.commons', name: 'commons-collections4', version: '4.4'
            }
        }
        jvmTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
            }
        }
        jsMain {
            dependencies {
                implementation kotlin('stdlib-js')
                implementation(npm("uuid", "^8.3.0"))
                implementation(npm("js-sha256", "^0.9.0"))
                implementation(npm("js-base64", "^3.4.5"))
            }
        }
        jsTest {
            dependencies {
                implementation kotlin('test-js')
            }
        }
    }
}

jvmTest.dependsOn ":model-server:fatJar"

tasks.jacocoTestReport {

    classDirectories.setFrom("${buildDir}/classes/kotlin/jvm/")
    sourceDirectories.setFrom(files("src/commonMain/kotlin", "src/jvmMain/kotlin"))

    executionData.setFrom(files("${buildDir}/jacoco/jvmTest.exec"))

    reports {
        xml.enabled true
        html.enabled true
    }
}

spotless {
    kotlin {
        licenseHeader '/*\n' +
                ' * Licensed under the Apache License, Version 2.0 (the "License");\n' +
                ' * you may not use this file except in compliance with the License.\n' +
                ' * You may obtain a copy of the License at\n' +
                ' *\n' +
                ' *  http://www.apache.org/licenses/LICENSE-2.0\n' +
                ' *\n' +
                ' * Unless required by applicable law or agreed to in writing,\n' +
                ' * software distributed under the License is distributed on an\n' +
                ' * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n' +
                ' * KIND, either express or implied.  See the License for the\n' +
                ' * specific language governing permissions and limitations\n' +
                ' * under the License. \n' +
                ' */\n' +
                '\n'
    }
}

task copyModelClientToMps(type: Sync) {
    from configurations.jvmDefault
    from "$buildDir/libs"
    into "$projectDir/../mps/org.modelix.model.client/lib"
    rename { fileName ->
        stripVersion(fileName)
    }
    exclude 'log4j*.jar'
    exclude 'annotations*.jar'
}

assemble.finalizedBy(copyModelClientToMps)

String stripVersion(String fileNameWithVersion) {
    String name = fileNameWithVersion
    if (version != null && version.length() > 0) name = name.replace("-" + version, "")
    name = name.replaceAll(/-\d+(\.\d+)*(-SNAPSHOT)?/, "")
    println "stripVersion($fileNameWithVersion) -> $name"
    return name
}